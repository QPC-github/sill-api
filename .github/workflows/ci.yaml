name: ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  test_lint:
    runs-on: ubuntu-latest
    if: ${{ !github.event.created && github.repository != 'garronej/ts-ci' }}
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        submodules: "recursive"
        token: ${{secrets.PAT}}
    - uses: actions/setup-node@v2.1.3
    - uses: bahmutov/npm-install@v1
    - name: If this step fails run 'npm run lint' and 'npm run format' then commit again.
      run: |
        PACKAGE_MANAGER=npm
        if [ -f "./yarn.lock" ]; then
            PACKAGE_MANAGER=yarn
        fi
        $PACKAGE_MANAGER run lint:check
        $PACKAGE_MANAGER run format:check
  build-data:
    runs-on: ${{ matrix.os }}
    needs: test_lint
    strategy:
      matrix:
        node: [ '16' ]
        os: [ ubuntu-latest ]
    name: Test with Node v${{ matrix.node }} on ${{ matrix.os }}
    steps:
    - name: Tell if project is using npm or yarn
      id: step1
      uses: garronej/ts-ci@v1.1.4
      with: 
        action_name: tell_if_project_uses_npm_or_yarn
    - uses: actions/checkout@v2.3.4
      with:
        submodules: true
        token: ${{secrets.PAT}}
    - run: du -a . 
    - uses: actions/setup-node@v2.1.3
      with:
        node-version: ${{ matrix.node }}
    - uses: bahmutov/npm-install@v1
    - if: steps.step1.outputs.npm_or_yarn == 'yarn'
      run: |
        yarn build
        yarn build-json
    - if: steps.step1.outputs.npm_or_yarn == 'npm'
      run: |
        npm run build
        npm run build-json
    - uses: actions/upload-artifact@v2
      with:
        name: json-files
        path: data/**/*.json

  check_if_version_upgraded:
    name: Check if version upgrade
    # We run this only if it's a push on the default branch or if it's a PR from a 
    # branch (meaning not a PR from a fork). It would be more straightforward to test if secrets.NPM_TOKEN is 
    # defined but GitHub Action don't allow it yet.
    if: |
      github.event_name == 'push' || 
      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login 
    runs-on: ubuntu-latest
    needs: build-data
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{ steps.step1.outputs.is_upgraded_version }}
      is_release_beta: ${{steps.step1.outputs.is_release_beta }}
    steps:
    - uses: garronej/ts-ci@v1.1.4
      id: step1
      with: 
        action_name: is_package_json_version_upgraded
        branch: ${{ github.head_ref || github.ref }}

  docker:
    needs: 
      - check_if_version_upgraded
      - build-data
    runs-on: ubuntu-latest
    # We publish the the docker image only if it's a push on the default branch or if it's a PR from a 
    # branch (meaning not a PR from a fork). It would be more straightforward to test if secrets.DOCKERHUB_TOKEN is 
    # defined but GitHub Action don't allow it.
    if: |
      github.event_name == 'push' || 
      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login 
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Computing Docker image tags
        id: step1
        env: 
          IS_UPGRADED_VERSION: ${{ needs.check_if_version_upgraded.outputs.is_upgraded_version }}
          TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
        run: |

          GITHUB_REPOSITORY=garronej/sill-api

          OUT=$GITHUB_REPOSITORY:$(
          [ "$GITHUB_EVENT_NAME" == "pull_request" ] &&
            echo "$GITHUB_HEAD_REF" ||
            echo "${GITHUB_REF#refs/*/}"
          )
          if [ "$IS_UPGRADED_VERSION" = "true" ]; then
            OUT=$OUT,$GITHUB_REPOSITORY:$TO_VERSION,$GITHUB_REPOSITORY:latest
          fi
          OUT=$(echo "$OUT" | awk '{print tolower($0)}') 
          echo ::set-output name=docker_tags::$OUT
      - uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ${{ steps.step1.outputs.docker_tags }}

  update_changelog:
    runs-on: ubuntu-latest
    needs: check_if_version_upgraded
    if: needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true'
    steps:
    - uses: garronej/ts-ci@v1.1.4
      with:
        action_name: update_changelog
        branch: ${{ github.head_ref || github.ref }}

  create_github_release:
    runs-on: ubuntu-latest
    needs: 
      - update_changelog
      - check_if_version_upgraded
    steps:
    - name: Build GitHub release body
      id: step1
      run: |
        if [ "$FROM_VERSION" = "0.0.0" ]; then
            echo "::set-output name=body::ðŸš€"
        else
            echo "::set-output name=body::ðŸ“‹ [CHANGELOG](https://github.com/$GITHUB_REPOSITORY/blob/v$TO_VERSION/CHANGELOG.md)"
        fi
      env: 
        FROM_VERSION: ${{ needs.check_if_version_upgraded.outputs.from_version }}
        TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
    - uses: garronej/action-gh-release@v0.2.0
      with:
        name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
        tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
        target_commitish: ${{ github.head_ref || github.ref }}
        body: ${{ steps.step1.outputs.body }}
        draft: false
        prerelease: ${{ needs.check_if_version_upgraded.outputs.is_release_beta == 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  publish_on_npm:
    runs-on: ubuntu-latest
    needs: 
      - update_changelog
      - check_if_version_upgraded
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: ${{ github.ref }}
    - uses: actions/setup-node@v2.1.3
      with:
        node-version: '15'
        registry-url: https://registry.npmjs.org/
    - uses: bahmutov/npm-install@v1
    - run: |
        PACKAGE_MANAGER=npm
        if [ -f "./yarn.lock" ]; then
            PACKAGE_MANAGER=yarn
        fi
        $PACKAGE_MANAGER run build
    - run: npx -y -p denoify@0.6.5 denoify_enable_short_npm_import_path
      env:
        DRY_RUN: "0"
    - name: Publishing on NPM
      run: |
        if [ "$(npm show . version)" = "$VERSION" ]; then
          echo "This version is already published"
          exit 0
        fi
        if [ "$NODE_AUTH_TOKEN" = "" ]; then
          echo "Can't publish on NPM, You must first create a secret called NPM_TOKEN that contains your NPM auth token. https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets"
          false
        fi
        EXTRA_ARGS=""
        if [ "$IS_BETA" = "true" ]; then
            EXTRA_ARGS="--tag beta"
        fi
        npm publish $EXTRA_ARGS
      env:
        NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
        VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
        IS_BETA: ${{ needs.check_if_version_upgraded.outputs.is_release_beta }}

  upload_json_files:
    runs-on: ubuntu-latest
    needs: publish_on_npm
    # Run after publish_on_npm if we do. See https://stackoverflow.com/a/69252812/3731798
    if: always()
    steps:
      - if: ${{ needs.publish_on_npm.result == 'failure' }}
        run: exit 1
      # The code for this action can be found here: 
      #Â https://github.com/etalab/sill/blob/gh-actions/src/publish_easily_consumable_entries.ts
      - uses: actions/checkout@v2.3.4
        with:
          repository: etalab/sill-csv-private
          token: ${{secrets.PAT}}
      - uses: actions/download-artifact@v2
        with:
          name: json-files
          path: data/
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: json-files
      - uses: actions/setup-node@v2.1.3
        with:
          node-version: '16'
      - run: git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/etalab/sill-csv-private.git
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
      - run: npx -y -p gh-pages@3.0.0 gh-pages -b archive -d data -u "github-actions-bot <actions@github.com>"
      - name: Send data via SSH to the server
        uses: appleboy/scp-action@v0.1.2
        with:
          host: 193.70.86.67
          username: web
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "data/*.json"
          target: "~/websites/code.gouv.fr/"
